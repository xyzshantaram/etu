import { Command } from "commander";
import { heading, info, Maybe, scream, slugify, timeMs } from "../../utils.ts";
import * as storage from "../../storage.ts";

interface ENewOpts {
    project: string;
    advance: Maybe<number>;
}

const currency = await storage.getConfigValue("currency");

const action = async (
    name: string,
    rate: number,
    initialHours: Maybe<number>,
    { project, advance }: ENewOpts,
) => {
    if (project) {
        const maybe = await storage.getProjectById(project);
        if (maybe.isSome()) scream(`Project with id ${maybe} already exists.`);
    }

    const slug = project || slugify(name);
    await storage.putProject({ name, rate, slug, advance });

    if (initialHours) {
        const currentTime = Date.now();
        await storage.putSession(slug, {
            name: "Initial hours",
            start: currentTime - timeMs({ h: initialHours }),
            end: currentTime,
        });
    }

    const rateStr = info(`${currency}${rate}/hr`);
    const hours = initialHours ? "Initial hours: " + initialHours + "." : "";
    console.log(
        `Created project "${heading(name)}" with id ${heading(slug)}. Rate is ${rateStr}. ${hours}`,
    );
    await storage.setDefaultProject(slug);
};

export const create = new Command("new")
    .description("Start a new project and set it as the default.")
    .option(
        "-p --project <string>",
        "the slug to use for the project. autogenerated by default.",
    )
    .option(
        "-a --advance <number>",
        "the number of hours advanced on the project. These will be subtracted when calculating the final amount.",
    )
    .argument("<name>", "name to use for the project.")
    .argument("<rate>", "hourly rate", Number)
    .argument("[initial-hours]", "number of hours to log to start with", Number)
    .action(action)
    .showHelpAfterError();
